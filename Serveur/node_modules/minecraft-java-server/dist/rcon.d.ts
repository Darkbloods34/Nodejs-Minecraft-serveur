/// <reference types="node" />
import { RconConfig } from './config';
export declare enum RequestType {
    Auth = 3,
    Exec = 2
}
export declare enum RequestId {
    Auth = 291,
    Exec = 801
}
export declare enum ResponseType {
    Auth = 2,
    Exec = 0
}
interface Events {
    connect: void;
    disconnect: void;
    error: string;
    warn: string;
}
export declare function encode(type: RequestType, id: RequestId, body: string): Buffer;
export declare function decode(chunk: Uint8Array): {
    size: number;
    id: number;
    type: number;
    body: string;
};
export declare class Rcon {
    config: RconConfig;
    private socket?;
    private authenticated;
    private queue;
    private promises;
    private execId;
    private tickInterval?;
    private emitter;
    on: <K extends "error" | "connect" | "disconnect" | "warn">(name: K, callback: (param: Events[K]) => void) => void;
    off: <K extends "error" | "connect" | "disconnect" | "warn">(name: K, callback: (param: Events[K]) => void) => void;
    private nextExecId;
    private listen;
    private tick;
    send(msg: string): Promise<string>;
    connect(maxAttempts?: number, attempts?: number): void;
    disconnect(): void;
    constructor(config: RconConfig);
}
export {};
