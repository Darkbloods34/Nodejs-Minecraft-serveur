declare type EventMap = Record<string, any>;
declare type EventKey<T extends EventMap> = string & keyof T;
declare type EventReceiver<T> = (param: T) => void;
interface Emitter<T extends EventMap> {
    on<K extends EventKey<T>>(name: K, callback: EventReceiver<T[K]>): void;
    off<K extends EventKey<T>>(name: K, callback: EventReceiver<T[K]>): void;
    emit<K extends EventKey<T>>(name: K, data?: T[K]): void;
}
export default function eventEmitter<T extends EventMap>(): Emitter<T>;
export {};
